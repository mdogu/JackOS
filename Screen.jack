// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    
    static boolean color;
    static Array twoToThe;
    static Array forwardMask;
    static Array backwardMask;

    /** Initializes the Screen. */
    function void init() {
        var int index, value, maskValue;
        let value = 1;
        let maskValue = 1;
        let twoToThe = Array.new(16);
        let forwardMask = Array.new(16);
        let backwardMask = Array.new(16);
        while (index < 16) {
            let twoToThe[index] = value;
            if (index = 15) {
                let backwardMask[index] = -1;
                let forwardMask[0] = -1;
            } else {
                let backwardMask[index] = maskValue;
                let forwardMask[index + 1] = ~maskValue;
            }
            let value = value + value;
            let maskValue = maskValue + maskValue + 1;
            let index = index + 1;
        }
        let color = true;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int value, address;
        if (color) {
            let value = 0;
        } else {
            let value = -1;
        }
        let address = 16384;
        while (address < 24576) {
            do Memory.poke(address, value);
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, word, wordInRow, bitInWord;
        let address = (32 * y) + (x / 16) + 16384;
        let word = Memory.peek(address);
        let wordInRow = x / 16;
        let bitInWord = x - (wordInRow * 16);
        if (color) {
            let word = word | twoToThe[bitInWord];
        } else {
            let word = word & ~twoToThe[bitInWord];
        }
        do Memory.poke(address, word);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int x, y, dx, dy, incrementX, incrementY, cutOffX, cutOffY, diff, diffX, diffY;
        var int address, word, startWordInRow, startBitInWord, endWordInRow, endBitInWord, cutOffAddress, currentWordInRow;

        let x = x1;
        let y = y1;

        let dx = x2 - x1;
        let dy = y2 - y1;

        if (dx > 0) {
            let incrementX = 1;
            let diffX = -dx;
        } else {
            let incrementX = -1;
            let diffX = dx;
        }
        
        if (dy > 0) {
            let incrementY = 1;
            let diffY = dy;
        } else {
            let incrementY = -1;
            let diffY = -dy;
        }

        let cutOffX = x2 + incrementX;
        let cutOffY = y2 + incrementY;

        if (dx = 0) {
            while (~(y = cutOffY)) {
                do Screen.drawPixel(x, y);
                let y = y + incrementY;
            }
            return;
        }

        if (dy = 0) {
            let address = (32 * y) + (x / 16) + 16384;
            let word = Memory.peek(address);
            let startWordInRow = x / 16;
            let startBitInWord = x - (startWordInRow * 16);
            let endWordInRow = x2 / 16;
            let endBitInWord = x2 - (endWordInRow * 16);
            if (startWordInRow = endWordInRow) {
                if (color) {
                    if (incrementX > 0) {
                        let word = word | (forwardMask[startBitInWord] & backwardMask[endBitInWord]);
                    } else {
                        let word = word | (forwardMask[endBitInWord] & backwardMask[startBitInWord]);
                    }
                } else {
                    if (incrementX > 0) {
                        let word = word & ~(forwardMask[startBitInWord] & backwardMask[endBitInWord]);
                    } else {
                        let word = word & ~(forwardMask[endBitInWord] & backwardMask[startBitInWord]);
                    }
                }
                do Memory.poke(address, word);
                return;
            } else {
                let currentWordInRow = startWordInRow;
                let cutOffAddress = (32 * y) + endWordInRow + 16384 + incrementX;
                while (~(address = cutOffAddress)) {
                    if ((currentWordInRow = startWordInRow) | (currentWordInRow = endWordInRow)) {
                        if (currentWordInRow = startWordInRow) {
                            if (color) {
                                if (incrementX > 0) {
                                    let word = word | forwardMask[startBitInWord];
                                } else {
                                    let word = word | backwardMask[startBitInWord];
                                }
                            } else {
                                if (incrementX > 0) {
                                    let word = word & ~forwardMask[startBitInWord];
                                } else {
                                    let word = word & ~backwardMask[startBitInWord];
                                }
                            }
                        } else {
                            let word = Memory.peek(address);
                            if (color) {
                                if (incrementX > 0) {
                                    let word = word | backwardMask[endBitInWord];
                                } else {
                                    let word = word | forwardMask[endBitInWord];
                                }
                            } else {
                                if (incrementX > 0) {
                                    let word = word & ~backwardMask[endBitInWord];
                                } else {
                                    let word = word & ~forwardMask[endBitInWord];
                                }
                            }
                        }
                        do Memory.poke(address, word);
                    } else {
                        if (color) {
                            do Memory.poke(address, -1);
                        } else {
                            do Memory.poke(address, 0);
                        }
                    }
                    let currentWordInRow = currentWordInRow + 1;
                    let address = address + incrementX;
                }
                return;
            }
        }

        while ((~(x = cutOffX)) | (~(y = cutOffY))) {
            do Screen.drawPixel(x, y);
            if (diff < 0) {
                let x = x + incrementX;
                let diff = diff + diffY;
            } else {
                let y = y + incrementY;
                let diff = diff + diffX;
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int y, incrementY, cutOffY;
        let y = y1;
        if (y2 > y1) {
            let incrementY = 1;
        } else {
            let incrementY = -1;
        }
        let cutOffY = y2 + incrementY;
        while (~(y = cutOffY)) {
            do Screen.drawLine(x1, y, x2, y);
            let y = y + incrementY;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dx, dy, r2;
        let dy = -r;
        let r2 = r * r;
        while (dy < (r + 1)) {
            let dx = Math.sqrt(r2 - (dy * dy));
            do Screen.drawLine(x - dx, y + dy, x + dx, y + dy);
            let dy = dy + 1;
        }
        return;
    }
}
