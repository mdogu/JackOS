// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field Array str;
    field int length;
    field boolean isZeroCapacity;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength > 0) {
            let str = Array.new(maxLength);
            let isZeroCapacity = false;
        } else {
            let isZeroCapacity = true;
        }
        let length = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (~isZeroCapacity) {
            do str.dispose();
        }
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let str[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let length = length - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int value, index, character;
        var boolean nonDigitCharacterDetected, isNegative;
        while (~nonDigitCharacterDetected & (index < length)) {
            let character = str[index];
            if ((character < 48) | (character > 57)) {
                if ((index = 0) & (character = 45)) {
                    let isNegative = true;
                } else {
                    let nonDigitCharacterDetected = true;
                }
            } else {
                let value = (value * 10) + (character - 48);
            }
            let index = index + 1;
        }
        if (isNegative) {
            return -value;
        } else {
            return value;
        }
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int dividend, quotient, remainder, count;
        var Array characters;
        let characters = Array.new(6);
        let dividend = Math.abs(val);
        while (dividend > 0) {
            let quotient = dividend / 10;
            let remainder = dividend - (quotient * 10);
            let characters[count] = remainder + 48;
            let dividend = quotient;
            let count = count + 1;
        }
        if (val < 0) {
            let characters[count] = 45;
            let count = count + 1;
        }
        let length = count;
        while (count > 0) {
            let str[length - count] = characters[count - 1];
            let count = count - 1;
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }


}
