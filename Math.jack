// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    /** Static member for computing j'th bit of x */
    static Array twoToThe;
    static int quotientY;

    /** Initializes the library. */
    function void init() {
        var int index, value;
        let value = 1;
        let twoToThe = Array.new(16);
        while (index < 16) {
            let twoToThe[index] = value;
            let value = value + value;
            let index = index + 1;
        }
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return -x;
        } else {
            return x;
        }
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, index, shiftedX;
        var boolean currentBit;
        let shiftedX = x;
        while (index < 16) {
            let currentBit = Math.bit(y, index);
            if (currentBit) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let index = index + 1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int halfQuotient, quotient, absX, absY, doubleAbsY, result;
        var boolean sign;

        let absX = Math.abs(x);
        let absY = Math.abs(y);
        let doubleAbsY = absY + absY;

        if ((absY > absX) | (doubleAbsY < 0)) {
            let quotientY = 0;
            return 0;
        }

        if ((x < 0) = (y < 0)) {
            let sign = true;
        } else {
            let sign = false;
        }

        let halfQuotient = Math.divide(absX, doubleAbsY);
        let quotient = halfQuotient + halfQuotient;
        if ((absX - quotientY) < absY) {
            let result = quotient;
        } else {
            let result = quotient + 1;
            let quotientY = quotientY + absY;
        }

        if (sign) {
            return result;
        } else {
            return -result;
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, index, power, square, sum;
        let index = 7;
        while (index > -1) {
            let sum = y + twoToThe[index];
            let square = sum * sum;
            if (((square - 1) < x) & (square > 0)) {
                let y = sum;
            }
            let index = index - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        } else {
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        } else {
            return b;
        }
    }

    /** Returns j'th bit of x */
    function boolean bit(int x, int j) {
        return ~((x & twoToThe[j]) = 0);
    }

}
